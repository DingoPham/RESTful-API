I) Các khái niệm

*) REST (Representational State Transfer) là một kiến trúc dựa trên giao thức HTTP.
    - REST đặt ra các nguyên tắc và hướng dẫn để thiết kế các hệ thống phân tán mạch lạc, linh 
    hoạt và dễ mở rộng
    - REST tập trung vào việc xử lý và truyền tải các tài nguyên (resources)
    - Một số nguyên tắc chính của REST bao gồm:
        + Giao thức không trạng thái (Stateless Protocol)
        + Giao tiếp thông qua các phương thức HTTP
        + Các tài nguyên được định danh duy nhất
        + Sử dụng các định dạng chuẩn để truyền tải dữ liệu
        + Khả năng caching
*) RESTful API (Representational State Transferful Application Programming 
Interface) là một kiểu thiết kế và triển khai các dịch vụ web (web service) dựa trên kiến 
trúc REST. 
    - Tuân thủ nguyên tắc của REST 
    - Cung cấp các điểm cuối (endpoints) mà client có thể truy cập để gửi yêu cầu và nhận phản 
    hồi từ server. Endpoint thường được biểu diễn bằng URL (Uniform Resource Locator)
    - Phân biệt REST và RESTful API:
        + REST là một "kiến trúc" tổng quát
        + RESTful API là một "triển khai cụ thể" của kiến trúc đó để xây dựng và triển khai các dịch vụ web,
tuân thủ các nguyên tắc và hướng dẫn của REST để tạo ra các dịch vụ web mạch lạc và linh hoạt
*) Resource (tài nguyên) là các đối tượng hoặc thông tin mà client có thể truy cập thông qua các yêu cầu gửi
đến server
*) Endpoint (điểm cuối) là các URL (Uniform Resource Locator) mà client có thể truy cập để gửi yêu cầu và 
nhận phản hồi từ server

    VD: http://localhost:9999/restfullservices/v1/user/{id}
    + http: Protocol
    + localhost: Host(domain name)
    + 9999: Port
    + restfullservices: Application Context
    + v1: Version
    + user: Resource
    + {id}: Parameter
*) HTTP method chỉ định loại yêu cầu mà client gửi đến server và hành động mà server 
nên thực hiện
    VD:
    + GET: nhận dữ liệu từ server
    + POST: thêm dữ liệu vào một tài liệu đã tồn tại hoặc tài nguyên
    + PUT: thay đổi (cập nhật) một tài liệu đã tồn tại hoặc tài nguyên trong server
    + DELETE: xoá dữ liệu từ server
    + PATCH: cập nhật một phần tài nguyên (sửa đổi)
*) HTTP status code là một mã số 3 chữ số được trả về từ server để thông báo về kết 
quả của yêu cầu HTTP được gửi bởi client.
    VD: 
    + 1XX: (Infomational: Thông báo) VD: 100(Continue)
    + 2XX: (Success: Thành công) VD: 200(Ok)
    + 3XX: (Redirection: Chuyển hướng) VD: 300(Multiple Choice)
    + 4XX: (Client error: Lỗi từ người dùng) VD: 400(Bad Request)
    + 5XX: (Server error: Lỗi từ server) VD: 500(Internal Server Error)

II) Quy chuẩn MISA RESTful API
1) Quy định về Naming cho Resource, Endpoint
    • Sử dụng danh từ số nhiều đặt tên cho Resource (tài nguyên) 
        VD: Users, Products...
    • Sử dụng dấu “/” để thể hiện mối quan hệ phân cấp giữa các resource 
        VD: Lấy tất cả các đơn hàng của người dùng có ID là 1
            +) Một user sở hữu nhiều order
            +) Order ở đây đóng vai trò sub-resource của user
            /Users/1/Orders
            => Lưu ý: +) Chỉ áp dụng do các method dạng GET, DELETE. Không áp dụng cho 
            method dạng POST, PUT
                      +) Tránh thể hiện quá phân cấp 2 lớp gây phức tạp và khó quản lý
    • Đặt tên Endpoint sử dụng Pascal Case
        VD: Sử dụng Pascal Case
            +) /Users
            +) /BannedUsers
            +) /Products/InternalCategory
    • Sử dụng tham số
        - Sử dụng tham số giúp cho URL đơn giản và có thể mở rộng
        - Trường hợp tham số ít phức tạp, ngắn, giá trị kiểu nguyên thủy (<5 tham số, length <2000)
            +) Lọc: cho phép truy vấn kết quả với các tham số cụ thể
            VD: GET /Users?FullName=Anh&Age=3
            +) Sắp xếp: sắp xếp kết quả trả về và hỗ trợ multisort
            VD: GET /Users?Sort=FullName Desc,Birthday Asc
        - Trường hợp tham số phức tạp, dài ( đặc thù MISA Paging) sử dụng POST thay thế
        POST /Students/Pagination
        {
            "take": 50,
            "filter": "[{\"Field\":\"Status\",\"Operator\":\"=\",\"Value\":1}]",
            "columns": "FullName,DateOfBirth,ClassName,Address,Gender,NickName,Status…",
            "sort": "FullName ASC, ClassName ASC"
        }
    • Không sử dụng động từ trong Endpoint
        - Việc đặt các động từ trong URL là không đúng. REST sử dụng danh từ để biểu thị tài nguyên và các 
        phương thức HTTP (GET, POST, PUT, DELETE, v.v.) được sử dụng để thực hiện các hành động trên các tài 
        nguyên đó, hoạt động hiệu quả như động từ.
        - VD: Phê duyệt một hợp đồng của một nhân viên
            + Giải pháp 1: Nếu ngữ cảnh chỉ sử dụng để cập nhật riêng trường Status của Contract, trong quá trình cập nhật 
            có xử lý các nghiệp vụ liên quan
            VD: PATCH /Employees/{user_id}/Contracts/{contract_id}/ hi Status/{Status_id}
            + Giải pháp 2: Nếu chỉ đơn thuần cập nhật thông tin thì có thể sử dụng PATCH chung với body là phần cần cập 
            nhật
            VD: PATCH /Employees/{user_id}/Contracts/{contract_id}
2) Quy định về Request
a) Quy định về Request header
    *) Các header custom thì phải có tiền tố x-misa
        - Header key: viết thường, không dấu
        - Header value: cần encode nếu có ký tự unicode
            x-misa-{headervalue}
            VD: x-misa-tenantcode, x-misa-clienttid, x-misa-sessionid
b) Quy định về Request body
    *) Format: JSON
        - Phổ biến
        - Dễ đọc hiểu 
        - Dễ dàng để các hệ thống máy tính phân tích và tạo ra
    *) Size: 
        - Không giới hạn, tuy nhiên mỗi loại WebServer có default riêng
        - Lưu ý: tùy chỉnh lại phù hợp với nhu cầu thực tế tránh lỗi (Ví dụ 413 Request Entity Too Large)
        - VD:
            + IIS mặc định là 4MB
            + Nginx mặc định là 1MB
c) Quy định về sử dụng HTTP method
    *) Sử dụng HTTP method phù hợp với hành động
        - POST: sử dụng tạo tài nguyên  --> CREATE
        - GET: lấy tài nguyên, không làm thay đổi trạng thái  --> READ
        - PUT: cập nhật tài nguyên  --> UPDATE
        - PATCH: cập nhật một phần tài nguyên  --> UPDATE
        - DELETE: xoá hẳn tài nguyên  --> DELETE
    *) VD về các method
        - /Users
            GET: Lấy danh sách tất cả người dùng
            POST: Tạo một người dùng mớ
            PUT: Không dùng
            PATCH: Không dùng
            DELETE: Không dùng
        - /Users/123
            GET: Lấy thông tin chi tiết người dùng 123
            POST: Không dùng
            PUT: Cập nhật thông tin cho người dùng 123 nếu có tồn tại
            PATCH: Cập nhật một thông tin cho người dùng 123 nếu có tồn tại
            DELETE: Xoá người dùng 123
        - /Users/123/Orders
            GET: Lấy  danh sách hóa đơn của người dùng 123
            POST: Không dùng
            PUT: Không dùng
            PATCH: Không dùng
            DELETE: Xóa tất cả hóa đơn của người dùng 123
3) Quy định về Respons
a) Quy định về sử dụng Http Status Code
    *) Quy định về sử dụng Http Status Code
        - 200(OK): Cho biết request đã thành công (GET/POST). Với trường hợp lấy dữ liệu nếu thành công 
        thì trả về kết quả dữ liệu được truy vấn
        - 201(CREATED): Tạo dữ liệu thành công (POST). Dữ liệu thêm mới thường được trả về kèm trong 
        response
        - 400(BAD REQUEST): Máy chủ nhận được một yêu cầu từ một client và không thể xử lý nó do yêu cầu không 
        hợp lệ hoặc không thể hiểu được (dữ liệu yêu cầu không đúng, sai định dạng, sai kiểu 
        dữ liệu)
        - 401(UNAUTHORIZED): Client không cung cấp thông tin xác thực hợp lệ hoặc không có quyền truy cập
        - 403(FORBIDDEN): Máy chủ từ chối thực hiện yêu cầu do người dùng không có quyền truy cập
        - 422(BUSINESS EXCEPTION): Lỗi nghiệp vụ do dự án tự định nghĩa (kiểm tra trùng mã, validate nghiệp vụ, không tìm 
        thấy bản ghi…
        - 500(INTERNAL SERVER ERROR): Lỗi xảy ra trong quá trình xử lý của máy chủ
b) Quy định về Response body
    *) Format: JSON
        - Phổ biến
        - Dễ đọc hiểu
        - Dễ dàng đề các hệ thống máy tính phân tích và tạo ra
    *) Size: 
        - Dùng DTO(Data Transfer Object) để trả về những thông tin cần thiết
        VD: cho một "User": ID, Username, Email, DateOfBirth, Address, PostalCode, Country, CreditCardNumber
        - Khi sử dụng DTO sẽ đưa ra kết quả như sau:
        "UserDTO": ID, Username, Email, Country
c) Quy định xử lý lỗi
    *)  Trong các trường hợp server trả về Http Status Code lỗi (4xx, 5xx) cần trả thêm thông 
    tin lỗi trong nội dung trả về
    *) Mẫu response lỗi
        - ErrorCode(Required): Định danh của mã lỗi. Phần lớn client sẽ sử dụng thông tin này để hiển thị message tương ứng
        - DevMsg(Required): Thông báo cho Dev. Thông báo ngắn gọn để thông báo cho Dev biết vấn đề đang gặp phải
        - UserMsg: Thông báo cho user, tùy theo đặc thù từng dịch vụ và client tích hợp
        - MoreInfo(Required): Thông tin chi tiết hơn về vấn đề. Ví dụ: Dữ liệu trả về client hiển thị thông báo, dữ liệu lỗi liên quan
        - Traceld(Required): Mã để tra cứu thông tin: ELK, file log, transaction
        VD mẫu lỗi: 
        {
            ErrorCode: “e001”,
            DevMsg: “It was not possible to connect to redis server”,
            UserMsg: “Có lỗi xảy ra! Vui lòng liên hệ với MISA”,
            MoreInfo: “https://openapi.misa.com.vn/errorcode/e001”,
            TraceId: “0654a167-8e70-4337-bea6-67c0c9e068df”
        }
III) Áp dụng
    *) Yêu cầu: Xây dựng Restful API cho phần quản lý người dùng bao gồm các chức năng: 
    thêm, sửa, xóa, hiển thị danh sách phân trang người dùng
    *) Các bước thiết kế:
        - B1: Xác định tài nguyên(Resource)
            + Bài toán quản lý người dùng => Tài nguyên ở đây là người dùng Users
        - B2: Xác định phương thức HTTPS sử dụng
            + Thêm người dùng => Sử dụng POST
            + Sửa người dùng => Sử dụng PUT
            + Xoá người dùng => Sử dụng DELETE
            + Lấy danh sách người dùng phân trang => Sử dụng GET. Tuy nhiên điều kiện filter và sort đặc thù 
            MISA thường nhiều, sử dụng POST để thay thế (MISA Paging)
        - B3: Xác định định dạng dữ liệu
            + JSON
        - B4: Thiết kế URL (Quy định về Resource, Endpoint)
        - B5: Xây dựng API hoàn chỉnh
            + Sau khi thực hiện thiết kế URL ta có thể implement chi tiết trong API để hoàn thiện API